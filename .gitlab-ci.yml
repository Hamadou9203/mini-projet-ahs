image: docker:latest
services:
    - name: docker:dind
      alias: flask

stages:
    - lint
    - build
    - scan
    - release

variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

#check app code
linter_flake8:
   stage: lint
   script:
     - apk add --no-cache python3 py3-pip
     - python3 -m venv venv  # Cr√©er un environnement virtuel
     - source venv/bin/activate  # Activer l'environnement virtuel
     - pip install flake8
     - flake8 --ignore=E501,E303 ./webapp/*.py

# check Dockerfile
linter_hadolink:
    stage: lint
    script:
      - docker run --rm -i hadolint/hadolint < Dockerfile


compilation:
  # Use the official docker image.
  stage: build
  
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build  -t "$DOCKER_IMAGE_NAME" .
   
    - docker save -o flask-app.war "$DOCKER_IMAGE_NAME"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  artifacts:
    paths:
        - flask-app.war


scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  stage: scan
  
  script:
    - docker load -i flask-app.war 
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --download-db-only --no-progress --cache-dir .trivycache/
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$DOCKER_IMAGE_NAME"
    # Prints full report
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress "$DOCKER_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$DOCKER_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json

package:
 stage: release
 before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
 only:
     - master
     - merge_requests
 script:
   - docker load -i flask-app.war 
   - docker push "$DOCKER_IMAGE_NAME"
   # Default branch is also tagged with `latest`
   - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi

