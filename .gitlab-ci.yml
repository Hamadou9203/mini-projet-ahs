image: docker:latest
services:
    - name: docker:dind
      alias: flask

stages:
    - lint
    - build
    - scan
    - test_acceptance
    - sonar_analysis
    - release

variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    EXT_PORT: 80
    INT_PORT: 5000

.template_tests: &test
  script:
   - docker load -i flask-app.war
   - docker run  -d -p $EXT_PORT:$INT_PORT --env PORT=$INT_PORT --name flask-app $DOCKER_IMAGE_NAME
   - sleep 10
   - docker ps
   - apk add --no-cache curl 
   - curl http://$DOMAIN:$EXT_PORT | grep -q "Hello"


#check app code
linter_flake8:
   stage: lint
   script:
     - apk add --no-cache python3 py3-pip
     - python3 -m venv venv  # Cr√©er un environnement virtuel
     - source venv/bin/activate  # Activer l'environnement virtuel
     - pip install flake8
     - flake8 --ignore=E501,E303,F401 ./webapp/*.py

# check Dockerfile
linter_hadolink:
    stage: lint
    script:
      - docker run --rm -i hadolint/hadolint < Dockerfile


compilation:
  # Use the official docker image.
  stage: build
  
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build  -t "$DOCKER_IMAGE_NAME" .
   
    - docker save -o flask-app.war "$DOCKER_IMAGE_NAME"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  artifacts:
    paths:
        - flask-app.war


scanning:
  stage: scan
  script:
    - docker load -i flask-app.war 
    - docker run --rm aquasec/trivy image "$DOCKER_IMAGE_NAME" --no-progress 

Tests_Automatises:
  <<: *test
  stage: test_acceptance
  variables:
    DOMAIN: "flask"
    

# Etape d'analyse SonarCloud
sonarcloud_analysis:
  stage: sonar_analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner  -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  


package:
 stage: release
 before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
 only:
     - master
     - merge_requests
 script:
   - docker load -i flask-app.war 
   - docker push "$DOCKER_IMAGE_NAME"
   # Default branch is also tagged with `latest`
   - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi

