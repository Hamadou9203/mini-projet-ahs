image: docker:latest
services:
    - name: docker:dind
      alias: flask

.only-default: &only-default
  only:
    - branches
    - merge_requests

stages:
    - lint
    - build
    - scan
    - test_acceptance
    - sonar_analysis
    - release
    - deploy-review
    - stop-review
    - fin

variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    EXT_PORT: 80
    INT_PORT: 5000
    AMI_ID: "ami-04b4f1a9cf54c11d0"
    KEY_NAME: "Giltab-us"
    SECURITY_GROUP: "sg-0169affe6db10f8b1"
    SUBNET_ID: "subnet-09d7b916c3f258a95"
    INSTANCE_TYPE: "t2.micro"
    STORAGE: 100


.template_tests: &test
  <<: *only-default
  script:
   - docker load -i flask-app.war
   - docker run  -d -p $EXT_PORT:$INT_PORT --env PORT=$INT_PORT --name flask-app $DOCKER_IMAGE_NAME
   - sleep 10
   - docker ps
   - apk add --no-cache curl 
   - curl http://$DOMAIN:$EXT_PORT | grep -q "Hello"


#check app code
linter_flake8:
   stage: lint
   <<: *only-default
   script:
     - apk add --no-cache python3 py3-pip
     - python3 -m venv venv  # Créer un environnement virtuel
     - source venv/bin/activate  # Activer l'environnement virtuel
     - pip install flake8
     - flake8 --ignore=E501,E303,F401 ./webapp/*.py

# check Dockerfile
linter_hadolink:
    stage: lint
    <<: *only-default
    script:
      - docker run --rm -i hadolint/hadolint < Dockerfile


compilation:
  # Use the official docker image.
  stage: build
  <<: *only-default
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build  -t "$DOCKER_IMAGE_NAME" .
#    - docker push "$DOCKER_IMAGE_NAME"
    - docker save -o flask-app.war "$DOCKER_IMAGE_NAME"
  # Run this job in a branch where a Dockerfile exists
  artifacts:
    paths:
        - flask-app.war

# scanning image using trivy
scanning:
  stage: scan
  <<: *only-default
  script:
    - docker load -i flask-app.war 
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image "$DOCKER_IMAGE_NAME" --no-progress 

Tests_Automatises:
  <<: *test
  stage: test_acceptance
  variables:
    DOMAIN: "flask"
    

# Etape d'analyse SonarCloud
sonarcloud_analysis:
  <<: *only-default
  stage: sonar_analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner  -Dsonar.projectKey=$SONAR_PROJET_KEY -Dsonar.organization=$SONAR_ORG -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.pullrequest.key=$CI_MERGE_REQUEST_IID -Dsonar.pullrequest.branch=$CI_COMMIT_REF_NAME -Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
  
  


package:
 stage: release
 before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
 only:
     - main
     - merge_requests
 script:
   - docker load -i flask-app.war 
   - docker push "$DOCKER_IMAGE_NAME"
   # Default branch is also tagged with `latest`
   - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
 dependencies:
   - compilation

deploy review:
  stage: deploy-review
  only:
   - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: $REVIEW_ENVIRONMENT_URL
    on_stop: stop review
  script:
    - export INIT_PATH=$(pwd)
    - apk add --no-cache python3 py3-pip
    - python3 -m venv venv  # Créer un environnement virtuel
    - source venv/bin/activate  # Activer l'environnement virtuel
    - pip install awscli  # Installer awscli dans l'environnement virtuel

    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION

    - export TAG="review-$CI_COMMIT_REF_NAME"

    - |
      INSTANCE_ID=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].InstanceId" \
        --output text)

    - |
      if [ -n "$INSTANCE_ID" ]; then
        echo "Une instance avec le tag '$TAG' existe déjà : $INSTANCE_ID"
      else
        USER_DATA="#!/bin/bash
        curl -fsSL https://get.docker.com -o install-docker.sh
        sh install-docker.sh --dry-run
        sudo sh install-docker.sh
        sudo usermod -aG docker ubuntu"

        aws ec2 run-instances \
          --image-id $AMI_ID \
          --count 1 \
          --instance-type $INSTANCE_TYPE \
          --key-name $KEY_NAME \
          --security-group-ids $SECURITY_GROUP \
          --subnet-id $SUBNET_ID\
          --block-device-mappings DeviceName=/dev/sda1,Ebs={VolumeSize=$STORAGE} \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value='$TAG'}]' \
          --user-data "$USER_DATA"

        sleep 70
        echo "Instance EC2 créée avec le tag '$TAG'."
      fi

    - |
      PUBLIC_IP=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].PublicIpAddress" \
        --output text)

    - |
      echo $PUBLIC_IP
      if [ -z "$PUBLIC_IP" ]; then
        echo "Aucune adresse IP publique associé a instance trouvée avec le tag '$TAG'."
        exit 1
      fi

    - export HOSTNAME_DEPLOY_REVIEW=$PUBLIC_IP
    - echo "IP publique de l'instance est $HOSTNAME_DEPLOY_REVIEW"

    - apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "${SSH_KEY}" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -t rsa  ${HOSTNAME_DEPLOY_REVIEW} >> ~/.ssh/known_hosts
    - command1="echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin"
    - command2="docker pull $DOCKER_IMAGE_NAME"
    - command3="docker rm -f webapp"
    - command4="docker run -d -p $EXT_PORT:$INT_PORT --env PORT=$INT_PORT  --name webapp $DOCKER_IMAGE_NAME"
    - ssh -t ${SSH_USER}@${HOSTNAME_DEPLOY_REVIEW} 
      -o SendEnv=DOCKER_IMAGE_NAME 
      -o SendEnv=CI_REGISTRY_USER 
      -o SendEnv=CI_REGISTRY_PASSWORD 
      -o SendEnv=CI_REGISTRY 
      -C "$command1 && $command2 && $command3 && $command4"

    - cd $INIT_PATH
    - echo "REVIEW_ENVIRONMENT_URL=http://$HOSTNAME_DEPLOY_REVIEW" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env 
  variables:
     REVIEW_ENVIRONMENT_URL: http://$HOSTNAME_DEPLOY_REVIEW


stop review:
  stage: stop-review
  only:
   - merge_requests
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  script:
    - apk add --no-cache python3 py3-pip
    - python3 -m venv venv  # Créer un environnement virtuel
    - source venv/bin/activate  # Activer l'environnement virtuel
    - pip install awscli  # Installer awscli dans l'environnement virtuel

    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION

    
    - export TAG="review-$CI_COMMIT_REF_NAME"
    - export NEW_TAG="destroyed-$CI_COMMIT_REF_NAME"

    - |
      INSTANCE_ID=$(aws ec2 describe-instances \
        --filters "Name=tag:Name,Values=$TAG" \
        --query "Reservations[*].Instances[*].InstanceId" \
        --output text)

    - |
      if [ -n "$INSTANCE_ID" ]; then
        echo "Suppression de l'instance avec le tag '$TAG': $INSTANCE_ID"

        # Mettre à jour le tag de l'instance
        aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=$NEW_TAG
        echo "Tag de l'instance mis à jour en '$NEW_TAG'."

        echo "Suppression de l'instance avec le tag '$NEW_TAG': $INSTANCE_ID"
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        echo "Instance EC2 supprimée avec le tag '$NEW_TAG'."
      else
        echo "Aucune instance avec le tag '$TAG' à supprimer."
      fi



sortie:
   stage: fin
   <<: *only-default
   script:
    - echo "fin du ${CI_COMMIT_MESSAGE} avec succés" 


