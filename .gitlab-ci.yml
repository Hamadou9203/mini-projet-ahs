image: docker:latest
services:
    - name: docker:dind
      alias: flask

stages:
    - lint
    - build
    - release

variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

linter_flake8:
   stage: lintflake
   script:
     - apk add --no-cache python3 py3-pip
     - pip install flake8
     - flake8 ./webapp/*.py

linter_hadolink:
    stage: lint
    script:
      - docker run --rm -i hadolint/hadolint < Dockerfile


compilation:
  # Use the official docker image.
  stage: build
  
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build  -t "$DOCKER_IMAGE_NAME" .
   
    - docker save -o flask-app.war
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
  artefacts:
      path:
          - flask-app.war


package:
 stage: release
 only:
     - master
     - merge_requests
 script:
   - docker load -i flask-app.war "$DOCKER_IMAGE_NAME" 
   - docker push "$DOCKER_IMAGE_NAME"
   # Default branch is also tagged with `latest`
   - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi

